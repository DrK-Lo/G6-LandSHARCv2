### Add Transcriptome
points(GenomeSizeMB, rep(Trans.Ave, length(GenomeSize)), type="l", col="darkgreen")
polygon(c(GenomeSizeMB[1],GenomeSizeMB[1], GenomeSizeMB[length(GenomeSize)],GenomeSizeMB[length(GenomeSize)]),
c(Trans.LowAve, Trans.HighAve, Trans.HighAve, Trans.LowAve ),
col=rgb(0,0.8,0,0.5))
text(110,-5, "Transcriptome", col="darkgreen", adj=0)
### Add Whole genome low coverage
points(GenomeSizeMB, NumIndWG.LC, type="l", col=rgb(0.5,0,0.5), lwd=3)
### Plot whole genome
plot(GenomeSizeMB, NumIndWG, type="l", col="black", log="x",
ylab="Number of Individuals (WG, LCWG)\nor Populations (WGP)\nper 250 million paired-end 100 bp reads",
xlab="Genome Size (MB)", ylim=c(-1,20))
polygon(c(GenomeSizeMB, rev(GenomeSizeMB)),
c(NumIndWG.Low, rev(NumIndWG.High)),
col=rgb(1,1,0,0.3))
text(500, 10, "Whole genome sequencing\n(WG)", adj=0)
### Add Whole genome pool seq
points(GenomeSizeMB, NumIndWG.Pool, type="l", col="magenta")
polygon(c(GenomeSizeMB, rev(GenomeSizeMB)),
c(NumIndWG.Low.Pool, rev(NumIndWG.High.Pool)),
col=rgb(1,0,1,0.3))
text(100, -1, "Whole genome pooled sequencing (WGP)", col="magenta",adj = 0)
abline(1,0, col=rgb(0,0,0,0.5))
dev.off()
### References
# Hohenlohe 2016.
# Jones MR, Good JM (2015) Targeted capture in evolutionary and ecological genomics. Mol Ecol 25:185–202
# Schlötterer C, Tobler R, Kofler R, Nolte V (2014) Sequencing pools of individuals — mining genome-wide polymorphism data without big funding. Nat Rev Genet 15:749–763
### KE Lotterhos
### NimBIOS March 22, 2016
### This script calculates sampling design (# individuals per lane) based on
### different methods of ascertaining your data (RAD, capture, transcriptome,
### whole genome sequencing, etc.)
reads <- 250*10^6           # Current number of clusters on Illumina HiSeq 2500 one lane
readLength <- 100*2         # 100-bp paired-end reads
proportionOffTarget <- 0.2  # Assume 20% of reads are off target due to
# contamination, PCR duplicates, etc.
GenomeSize <- c(seq(100,1000, by=100), seq(2000,10000,by=1000))*10^6
# Levels of genome size from 100 MB to 10 GB
GenomeSizeMB <- GenomeSize/10^6
# Genome Size in Megabases
### RAD ###
### For RADseq, we assume the RAD protocol described in Hohenlohe (2016):
### digestion with a single enzyme.
### A 6 bp better will cut every 4096 base pairs.
### We assume the desired mean coverage is 20x per RAD tag.
bp6 <- 4096         # expected frequency of cuts for 6 bp cutter (Hohenlohe 2016)
# bp8 <- 65536      # an 8 bp cutter cuts this often
# This function calculates the number of individuals that can be sequenced
# in an Illumina lane for RAD
GetNumIndRAD <- function(GenomeSize, bp6, reads, readLength,
proportionOffTarget, coverage){
# Genome Size in base pairs
# bp6 is the frequency of cut sites (e.g., every 5000 bp)
# reads is the number of reads
# readLength is the length of reads
# proportionOffTarget is the proportion of reads lost
# coverage is the average read depth desired for each individual
numberTags <- GenomeSize/bp6*2 # 2 rad tags per cutsite
numBpPerInd <- numberTags*readLength
numInd <- (reads*readLength*(1-proportionOffTarget))/(numBpPerInd*coverage)
return(numInd)
}
### Do calculations for 6-bp cutter (4096)
### Confidence intervals based on a more frequent cutsite 4096*0.6= 2,457.6
### and less frequent 4096*1.4=5,734.4
bp6Ave <- GetNumIndRAD(GenomeSize, bp6, reads, readLength, proportionOffTarget, coverage=20)
bp6Ave.half <- GetNumIndRAD(GenomeSize, bp6*0.6, reads, readLength, proportionOffTarget, coverage=20)
bp6Ave.double <- GetNumIndRAD(GenomeSize, bp6*1.4, reads, readLength, proportionOffTarget, coverage=20)
### Exome Capture ###
# Sequence capture (Jones and Good 2015) first requires design of genomic sequences
# for probe design.  Then you get someone to design the probes.
# Biotinylated probes are used to "capture" sequences of interest from the genome.
# This approach requires (i) sequences, (ii) a bioinformatician to design probes,
# and (iii) a more expensive library prep.
# We assume the desired coverage is 20x per exome per individual.
# We also assume that probes are designed near exon boundaries and will capture
# 100 bp on each side of exon.  About 2-3x more individuals could be sequenced
# if probes were designed only in center of exons (and fewer probes could be purchased)
# We calculate CI based on half captured or twice as much captured
numGenes <- 30000                   # assume 30000 genes
numBpPerExome1 <- numGenes*(150)*7 # assume 7 exons/gene and 150 bp/exon
numBpPerExome <- numBpPerExome1 + numGenes*(100+100)*7 # sequence capture of regions on either side of exons
### This function calculates the number of individuals you can sequence
GetNumIndExome <- function(numBpPerExome, reads, readLength, coverage){
numInd <- (reads*readLength*(1-proportionOffTarget))/(numBpPerExome*coverage)
}
Exome.Ave <- GetNumIndExome(numBpPerExome, reads, readLength, coverage=20)
Exome.LowAve <- GetNumIndExome(numBpPerExome*0.5, reads, readLength, coverage=20)
Exome.HighAve <- GetNumIndExome(numBpPerExome*2, reads, readLength, coverage=20)
### Transcriptome
# For the transcriptome, we assume the same size exon as in the last example
# To get enough coverage of low expressed transcripts, a transcriptome needs much
# higher coverage than exome capture: 50-150x coverage.
Trans.Ave <- GetNumIndExome(numBpPerExome1, reads, readLength, 100)
Trans.LowAve <- GetNumIndExome(numBpPerExome1, reads, readLength, 50)
Trans.HighAve <- GetNumIndExome(numBpPerExome1, reads, readLength, 150)
### Whole Genome ####
# Whole genome sequencing is just as it sounds.
GetNumIndWholeGen <- function(GenomeSize, reads, readLength, coverage){
(reads*readLength*(1-proportionOffTarget))/(GenomeSize*coverage)
}
# Whole genome sequencing of individuals.  Each individual barcoded.
# In this case, the investigator cares about calling heterozygotes accurately.
# Desired coverage is 10x-30x
NumIndWG <- GetNumIndWholeGen(GenomeSize, reads, readLength, 20)
NumIndWG.Low <- GetNumIndWholeGen(GenomeSize, reads, readLength, 10)
NumIndWG.High <- GetNumIndWholeGen(GenomeSize, reads, readLength, 30)
# Whole genome pool-seq. DNA from individuals within a population is
# pooled in equimolar amounts, and then given a barcode.  Each population
# has a different barcode.
# Best practices suggests that at least 100 individuals should be pooled per
#  population and 100x coverage per pool (Schlötterer et al. 2014).  These larger
# numbers are required
# We assume desired
NumIndWG.Pool <- GetNumIndWholeGen(GenomeSize, reads, readLength, 100)
NumIndWG.Low.Pool <- GetNumIndWholeGen(GenomeSize, reads, readLength, 80)
NumIndWG.High.Pool <- GetNumIndWholeGen(GenomeSize, reads, readLength, 120)
NumIndWG.LC <- GetNumIndWholeGen(GenomeSize, reads, readLength, 1)
### Plot RAD ####
pdf(file = "BreakingRAD.pdf", width = 6, height= 8)
par(mar=c(4,6,1,1), mfrow=c(2,1))
plot(GenomeSizeMB, bp6Ave, log="x", type="l", xlab="Genome Size (MB)",
ylab="Number of individuals\nper 250 million paired-end 100 bp reads",
ylim=c(-1,220))
polygon(c(GenomeSizeMB, rev(GenomeSizeMB)),
c(bp6Ave.half, rev(bp6Ave.double)),
col=rgb(0,0,0,0.3))
text(200, 150, "RAD-seq 6 bp cutter", adj=0)
### Add Exome
points(GenomeSizeMB, rep(Exome.Ave, length(GenomeSize)), type="l", col="blue")
polygon(c(GenomeSizeMB[1],GenomeSizeMB[1], GenomeSizeMB[length(GenomeSize)],GenomeSizeMB[length(GenomeSize)]),
c(Exome.LowAve,Exome.HighAve, Exome.HighAve, Exome.LowAve ),
col=rgb(0,0,0.8,0.3))
text(3000,60, "Exome Capture", col="blue")
### Add Transcriptome
points(GenomeSizeMB, rep(Trans.Ave, length(GenomeSize)), type="l", col="darkgreen")
polygon(c(GenomeSizeMB[1],GenomeSizeMB[1], GenomeSizeMB[length(GenomeSize)],GenomeSizeMB[length(GenomeSize)]),
c(Trans.LowAve, Trans.HighAve, Trans.HighAve, Trans.LowAve ),
col=rgb(0,0.8,0,0.5))
text(110,-5, "Transcriptome", col="darkgreen", adj=0)
### Add Whole genome low coverage
#points(GenomeSizeMB, NumIndWG.LC, type="l", col=rgb(0.5,0,0.5), lwd=3)
#text(110,-5, "Whole Genome Low Coverage (1x)", col="darkgreen", adj=0)
### Plot whole genome
plot(GenomeSizeMB, NumIndWG, type="l", col="black", log="x",
ylab="Number of Individuals (WG, LCWG)\nor Populations (WGP)\nper 250 million paired-end 100 bp reads",
xlab="Genome Size (MB)", ylim=c(-1,20))
polygon(c(GenomeSizeMB, rev(GenomeSizeMB)),
c(NumIndWG.Low, rev(NumIndWG.High)),
col=rgb(1,1,0,0.3))
text(500, 10, "Whole genome sequencing\n(WG)", adj=0)
### Add Whole genome pool seq
points(GenomeSizeMB, NumIndWG.Pool, type="l", col="magenta")
polygon(c(GenomeSizeMB, rev(GenomeSizeMB)),
c(NumIndWG.Low.Pool, rev(NumIndWG.High.Pool)),
col=rgb(1,0,1,0.3))
text(100, -1, "Whole genome pooled sequencing (WGP)", col="magenta",adj = 0)
abline(1,0, col=rgb(0,0,0,0.5))
dev.off()
### References
# Hohenlohe 2016.
# Jones MR, Good JM (2015) Targeted capture in evolutionary and ecological genomics. Mol Ecol 25:185–202
# Schlötterer C, Tobler R, Kofler R, Nolte V (2014) Sequencing pools of individuals — mining genome-wide polymorphism data without big funding. Nat Rev Genet 15:749–763
cov(rep(-1,5), rep(1,5))
cov(rep(1,5), rep(1,5))
cov(c(rep(-1,5), rep(1,5)), c(cov(rep(-1,5),rep(1,5))))
cov(c(rep(-1,5), rep(1,5)), c(rep(-1,5),rep(1,5)))
cor(c(rep(-1,5), rep(1,5)), c(rep(-1,5),rep(1,5)))
a <- c(rep(-1,5), rep(1,5))
b <- seq(-1,1,by=0.01)
cov(a,a)
cor(a,a)
cov(b,b)
cor(b,b)
sum(a*a)
sum(b*b)
b
b <- seq(-1,1,by=length(a))
cov(b,b)
b
b <- seq(-1,1,by=length(a))
a
b
b <- seq(-1,1,length.out = length(a))
cov(b,b)
cov(a,a)
u
pop <- matrix(1000, 10, 10)
pop[1:2,] <- 0
pop
pop[3:5,] <- 0
pop
pop <- matrix(1000, 100, 100)
pop[1:50,] <- 0
pop
quartz()
image(pop)
InitialPopVect <- pop
u=1e-05
p_start = 0.2
OccupiedVect <- InitialPopVect
OccupiedVect[which(InitialPopVect>0)]=1
N_vect <- InitialPopVect
P_scaleVECT <- migration_C(OccupiedVect, X_Demes, Y_Demes, MigMat)
source("/Users/katie/Desktop/CurrResearch/LandSHARCv2/LandscapeSimulatorCode/Code_AllSourceFiles20160320.R")
P_scaleVECT <- migration_C(OccupiedVect, X_Demes, Y_Demes, MigMat)
if(file.exists("src/drift.o")){system(paste("rm src/drift.o"))}
if(file.exists("src/drift.so")){system(paste("rm src/drift.so"))}
system("R CMD SHLIB src/drift.c")
dyn.load("src/drift.so")
drift_C<- function(Ne, P_freqMAT){
out<- .C("drift", as.integer(Ne), as.double(P_freqMAT), as.integer(length(P_freqMAT)))
return(out[[2]])
}
###################### MUTATION ####################
if(file.exists("src/mutation.o")){system(paste("rm src/mutation.o"))}
if(file.exists("src/mutation.so")){system(paste("rm src/mutation.so"))}
system("R CMD SHLIB src/mutation.c")
dyn.load("src/mutation.so")
mutation_C <- function(u, P_freqMAT){
l <- length(P_freqMAT)
out<- .C("mutation", as.double(u), as.double(P_freqMAT), as.integer(l))
return(out[[2]])
}
###################### SELECTION ####################
if(file.exists("src/selection.o")){system(paste("rm src/selection.o"))}
if(file.exists("src/selection.so")){system(paste("rm src/selection.so"))}
system("R CMD SHLIB src/selection.c")
dyn.load("src/selection.so")
selection_C <- function(p_vect, s_vect){
l <- length(p_vect)
out <- .C("selection", as.double(p_vect), as.double(s_vect), as.integer(l))
return(out[[1]])
}
###################### MIGRATION IN C ####################
if(file.exists("src/migration.o")){system(paste("rm src/migration.o"))}
if(file.exists("src/migration.so")){system(paste("rm src/migration.so"))}
system("R CMD SHLIB src/migration.c")
dyn.load("src/migration.so")
migration_C <- function(P, xdim, ydim, MigMat){
MigMatDim <- dim(MigMat)[1]
Extend <- floor(MigMatDim/2)
pnew <- rep(0, (xdim+Extend*2)*(ydim+Extend*2))
MigVect <- as.vector(MigMat)
out <- .C("migration", as.double(P), as.integer(xdim), as.integer(ydim),as.double(pnew), as.double(MigVect), as.integer(MigMatDim), as.integer(Extend))
pnew <- matrix(out[[4]], (xdim+Extend*2), (ydim+Extend*2))
pnew2 <- as.vector(pnew[(Extend+1):(xdim+Extend), (Extend+1):(ydim+Extend)])
# pnew3 <- pnew2/P_scaleVECT
return(pnew2)
}
############### OTHER FUNCTIONS ##############################
ConvertEnviToIslands <- function(s_VECT, IslandSize, X_Demes, Y_Demes){
x = seq(IslandSize,X_Demes, by=IslandSize)
y = seq(IslandSize,Y_Demes, by=IslandSize)
out <- matrix(NA, length(x), length(y))
s_MAT <- matrix(s_VECT, X_Demes, Y_Demes)
for (i in 1:length(x)){
for (j in 1:length(y)){
out[i,j] = mean(s_MAT[(x[i]-4):x[i], (y[j]-4): y[j]])
}
}
return(as.vector(out))
}
ConvertVectToLS <- function(X_Demes, Y_Demes, P_Vect, IslandSize){
k <- 0
P_freqMAT <- matrix(NA, X_Demes,Y_Demes)
X_Demes_Is <- X_Demes/IslandSize
Y_Demes_Is <- Y_Demes/IslandSize
for (i in 1:X_Demes_Is){
for (j in 1:Y_Demes_Is){
k <- k + 1
P_freqMAT[((i-1)*IslandSize+1):(i*IslandSize), ((j-1)*IslandSize+1):(j*IslandSize)] <-  P_Vect[k]
}
}
return(P_freqMAT)
}
Get_selVECT <- function(s_low,s_high, Envi_VECT){
if (s_high==0 & s_low==0){s_VECT=0}else{
if(s_high==-s_low){
s_slope <- (s_high - s_low)/(4*sd(Envi_VECT))
#slope is determined by 4 SD (ie ~ 95% CI)
#intercept is 0 when s_low=s_high
s_VECT <- s_slope*Envi_VECT
}else{
s_slope <- (s_high - s_low)/(4*sd(Envi_VECT))
s_int <- s_high-2*sd(Envi_VECT)*s_slope
s_VECT <- s_slope*Envi_VECT + s_int
} #end nested if
}		#end if
return(s_VECT)
} #end function
getRunName <- function(){
return(paste(round(unclass(Sys.time())), sample(1:1000,1), sep="_"))
}
plotAlleleFreqImage <- function(X_Locs, Y_Locs, P_plotMAT, gen, FST_All){
P_plotMAT=matrix(as.vector(P_plotMAT), nrow=length(X_Locs)-1, ncol=length(Y_Locs)-1)
image.plot(X_Locs, Y_Locs, P_plotMAT, main=paste("Allele freqs:", gen, "gens, FST=",round(FST_All,5)), breaks=seq(0,1,0.01), col=two.colors(n=100, start="darkblue", end="darkred", middle=grey(0.8), alpha=1.0),cex.main=0.8)
}
GetColNamesEnvi <- function(){return(c("runname", "X_Dist", "Y_Dist", "X_Dist_Adj", "Y_Dist_Adj", "X_Demes","Y_Demes", "Gamma", "SD", "CellSize", "BETA_1", "BETA_X", "BETA_Y", "RANGE", "SILL", "REPID", "NumLociBase"))}
GetColNamesLandscapeMeta <- function(){return(c("MODEL_TYPE", "LOCUS_TYPE", "runname", "X_Demes", "Y_Demes", "Scale", "u", "GEN", "LandscapeMatGen", "FSTgen", "MOVIE", "MOVIEgen", "m", "IslandSize", "Island_N", "DispersalKernel_FilePath", "K_All", "GEN_Refugia", "r_growth", "Refugia_StartMat_FilePath", "AlleeDensity", "MOVIE_Density", "Refugia_Selection", "ENVI_ID", "ENVI_DIR", "s_low", "s_high",  "p_start", "p_LS_end", "He_LS_start", "He_LS_end", "FST_All", "Landscape_Corr", "TotalT"))}
GetLandscape <- function(DemogSubFolder, gen_foc, runname ){
LandscapePath <- paste(DemogSubFolder,"/",runname,"Movie/",runname,"Matrix_AlleleFreqs_Gen",gen_foc, sep="")
#NOTE: path may be different for a different type of demography (my bad)
LandscapeMat <- as.matrix(read.table(LandscapePath, header=FALSE))
return(LandscapeMat)
}
GetEnviMeta <- function(ENVI_DIR){
EnviFile <- read.table(paste(ENVI_DIR, "All_Environments_Metadata.txt", sep=""))
colnames(EnviFile)<- GetColNamesEnvi()
BETA <- paste(EnviFile$BETA1, EnviFile$BETA_X, EnviFile$BETA_Y, sep="_")
Envis <- cbind(EnviFile, BETA)
return(Envis)
}
GetEnviInfo <- function(Index, Envi_Meta){
return(c(as.character(Envi_Meta$runname[Index]), Envi_Meta$BETA_X[Index], Envi_Meta$BETA_Y[Index], Envi_Meta$RANGE[Index], Envi_Meta$REPID[Index]))
}
GetEnvi <-function(runname, headDir){
file=paste(headDir, runname,"EnviMat.txt",sep="")
Envi<-data.matrix(read.table(file,header=FALSE))
colnames(Envi)=NULL
return(t(Envi))
}
SetOrCreateDir <- function(Dir){
if (file.exists(Dir)){
setwd(file.path(Dir))
} else {
dir.create((Dir))
setwd(file.path(Dir))
}
}
#############################################################
######Tic Toc functions for timing runs
#######################################################
#############################################################
tic <- function(gcFirst = TRUE, type=c("elapsed", "user.self", "sys.self")){
type <- match.arg(type)
assign(".type", type, envir=baseenv())
if(gcFirst) gc(FALSE)
tic <- proc.time()[type]
assign(".tic", tic, envir=baseenv())
invisible(tic)
}
toc <- function(){
type <- get(".type", envir=baseenv())
toc <- proc.time()[type]
tic <- get(".tic", envir=baseenv())
print(toc - tic)
invisible(toc)
}
setwd("/Users/katie/Desktop/CurrResearch/LandSHARCv2/LandscapeSimulatorCode/")
if(file.exists("src/drift.o")){system(paste("rm src/drift.o"))}
if(file.exists("src/drift.so")){system(paste("rm src/drift.so"))}
system("R CMD SHLIB src/drift.c")
dyn.load("src/drift.so")
drift_C<- function(Ne, P_freqMAT){
out<- .C("drift", as.integer(Ne), as.double(P_freqMAT), as.integer(length(P_freqMAT)))
return(out[[2]])
}
###################### MUTATION ####################
if(file.exists("src/mutation.o")){system(paste("rm src/mutation.o"))}
if(file.exists("src/mutation.so")){system(paste("rm src/mutation.so"))}
system("R CMD SHLIB src/mutation.c")
dyn.load("src/mutation.so")
mutation_C <- function(u, P_freqMAT){
l <- length(P_freqMAT)
out<- .C("mutation", as.double(u), as.double(P_freqMAT), as.integer(l))
return(out[[2]])
}
###################### SELECTION ####################
if(file.exists("src/selection.o")){system(paste("rm src/selection.o"))}
if(file.exists("src/selection.so")){system(paste("rm src/selection.so"))}
system("R CMD SHLIB src/selection.c")
dyn.load("src/selection.so")
selection_C <- function(p_vect, s_vect){
l <- length(p_vect)
out <- .C("selection", as.double(p_vect), as.double(s_vect), as.integer(l))
return(out[[1]])
}
###################### MIGRATION IN C ####################
if(file.exists("src/migration.o")){system(paste("rm src/migration.o"))}
if(file.exists("src/migration.so")){system(paste("rm src/migration.so"))}
system("R CMD SHLIB src/migration.c")
dyn.load("src/migration.so")
migration_C <- function(P, xdim, ydim, MigMat){
MigMatDim <- dim(MigMat)[1]
Extend <- floor(MigMatDim/2)
pnew <- rep(0, (xdim+Extend*2)*(ydim+Extend*2))
MigVect <- as.vector(MigMat)
out <- .C("migration", as.double(P), as.integer(xdim), as.integer(ydim),as.double(pnew), as.double(MigVect), as.integer(MigMatDim), as.integer(Extend))
pnew <- matrix(out[[4]], (xdim+Extend*2), (ydim+Extend*2))
pnew2 <- as.vector(pnew[(Extend+1):(xdim+Extend), (Extend+1):(ydim+Extend)])
# pnew3 <- pnew2/P_scaleVECT
return(pnew2)
}
P_scaleVECT <- migration_C(OccupiedVect, X_Demes, Y_Demes, MigMat)
MigMat <- as.matrix(read.file("MigMat"))
MigMat <- as.matrix(read.table("MigMat.txt"))
MigMat
image(MigMat)
P_scaleVECT <- migration_C(OccupiedVect, X_Demes, Y_Demes, MigMat)
X_Demes <- 100
Y_Demes <- 100
P_scaleVECT <- migration_C(OccupiedVect, X_Demes, Y_Demes, MigMat)
image(P_scaleVECT)
image(matrix(P_scaleVECT, 100, 100))
P_freqMAT <- rep(p_start, vectorsize)*OccupiedVect
vectorsize <- length(P_scaleVECT)
P_freqMAT <- rep(p_start, vectorsize)*OccupiedVect
mutVECT <- mutation_C(u,P_freqMAT)*OccupiedVect
mutVECT
migVECT<-migration_C(mutVECT, X_Demes, Y_Demes, MigMat)*OccupiedVect
migVECT[OccupiedVect==1] = migVECT[OccupiedVect==1]/P_scaleVECT[OccupiedVect==1]
migVECT
selVECT <- migVECT
driftVECT <- drift_C(N_vect, selVECT)*OccupiedVect
driftVECT
Last_PopVect <- PopVect2
ls()
Last_PopVect <- InitialPopVect
Last_Occupied <- Last_PopVect
Last_Occupied[Last_PopVect>0]=1
Fecundity_Vect <- PopVect2 + r_growth*PopVect2*(K_All-PopVect2)/K_All #logistic
PopVect2 <- InitialPopVect
Fecundity_Vect <- PopVect2 + r_growth*PopVect2*(K_All-PopVect2)/K_All #logistic
r_growth=0.5
Fecundity_Vect <- PopVect2 + r_growth*PopVect2*(K_All-PopVect2)/K_All #logistic
K_All <- 1000
Fecundity_Vect <- PopVect2 + r_growth*PopVect2*(K_All-PopVect2)/K_All #logistic
image(matrix(Fecundity_Vect, 100, 100))
PopVect <-migration_C(Fecundity_Vect, X_Demes, Y_Demes, MigMat)  #this is the next generation
PopVect[PopVect<AlleeDensity]=0
AlleeDensity <- 2
PopVect[PopVect<AlleeDensity]=0
if(sum(PopVect)==0){print("Sorry you went extinct!"); break;}
OccupiedVect <- PopVect
OccupiedVect[PopVect>0]=1	 #These cells become occupied in this time step
if(gen>100 & sum(Last_PopVect==round(PopVect))==(X_Demes*Y_Demes) & AtEQ == FALSE){AtEQ=TRUE; EqGen=gen; print(c("Eq has been reached at gen =", gen))} #if at equilibrium, tell it
PopVect2 <- round(PopVect)			# round pop Vect
mutVECT <- mutation_C(u,P_freqMAT)*Last_Occupied
mutVECT
P_freqMAT <- driftVECT
mutVECT <- mutation_C(u,P_freqMAT)*Last_Occupied
mutVECT
migVECT<-migration_C(mutVECT*Fecundity_Vect, X_Demes, Y_Demes, MigMat)*OccupiedVect
migVECT[OccupiedVect==0] = 0	# #this step removes alleles from demes with no individuals.  multiplying doesn't work.
migVECT[OccupiedVect==1] = migVECT[OccupiedVect==1]/PopVect[OccupiedVect==1]
migVECT<-migration_C(mutVECT*Fecundity_Vect, X_Demes, Y_Demes, MigMat)*OccupiedVect
library(fields)
image.plot(matrix(migVECT, 100, 100))
migVECT[OccupiedVect==0] = 0	# #this step removes alleles from demes with no individuals.  multiplying doesn't work.
migVECT[OccupiedVect==1] = migVECT[OccupiedVect==1]/PopVect[OccupiedVect==1]
selVECT <- migVECT
driftVECT <- drift_C(PopVect2, selVECT)*OccupiedVect
P_freqMAT <- driftVECT
mutVECT <- mutation_C(u,P_freqMAT)*Last_Occupied
migVECT<-migration_C(mutVECT*Fecundity_Vect, X_Demes, Y_Demes, MigMat)*OccupiedVect
# issue - want to check?
migVECT[OccupiedVect==0] = 0	# #this step removes alleles from demes with no individuals.  multiplying doesn't work.
migVECT[OccupiedVect==1] = migVECT[OccupiedVect==1]/PopVect[OccupiedVect==1]
image.plot(matrix(migVECT, 100,100))
paste(round(unclass(Sys.time())), runif(1), sep="_")
return(paste(round(unclass(Sys.time())), round(runif(1)*10000), sep="_"))
paste(round(unclass(Sys.time())), round(runif(1)*10000), sep="_")
paste(round(unclass(Sys.time())), round(runif(1)*10000), sep="_")
paste(round(unclass(Sys.time())), round(runif(1)*100000), sep="_")
linkage_block <- seq(500,10000, by=10)
linkage_block <- seq(500,10000, by=10)
bp6_cutter <- 4096
max.percent <- linkage_block/bp6_cutter
max.percent
quartz()
plot(linkage_block, max.percent)
plot(linkage_block, max.percent, type="l")
linkage_block <- seq(100,10000, by=10)
bp6_cutter <- 4096
max.percent <- linkage_block/bp6_cutter
max.percent[max.percent > 1] <- 1
quartz()
plot(linkage_block, max.percent, type="l")
bp8_cutter <- 65536
max.percent.8 <- linkage_block/bp8_cutter
max.percent.8[max.percent.8 > 1] <- 1
quartz()
plot(linkage_block, max.percent.6, type="l", lwd=2)
linkage_block <- seq(0,10000, by=10)
bp6_cutter <- 4096
bp8_cutter <- 65536
max.percent.6 <- linkage_block/bp6_cutter
max.percent.6[max.percent.6 > 1] <- 1
max.percent.8 <- linkage_block/bp8_cutter
max.percent.8[max.percent.8 > 1] <- 1
quartz()
points(linkage_block, max.percent.6, type="l", lwd=2)
plots(linkage_block, max.percent.6, type="l", lwd=2)
plot(linkage_block, max.percent.6, type="l", lwd=2)
points(linkage_block, max.percent.8, type="l", lwd=2, col="blue")
plot(linkage_block, max.percent.6, type="l", lwd=2,
xlab = "Size of linkage block", ylab = "Percentage of genome")
points(linkage_block, max.percent.8, type="l", lwd=2, col="blue")
text(6000, 0.9, "Theoretical max. 6 bp cutter")
text(6000, 0.1, "Theoretical max. 8 bp cutter")
plot(linkage_block, max.percent.6, type="l", lwd=2,
xlab = "Size of linkage block", ylab = "Percentage of genome")
points(linkage_block, max.percent.8, type="l", lwd=2, col="blue")
text(7000, 0.95, "Theoretical max. 6 bp cutter")
text(6000, 0.15, "Theoretical max. 8 bp cutter", col= "blue")
plot(linkage_block, max.percent.6, type="l", lwd=2,
xlab = "Size of linkage block", ylab = "Proportion of genome")
points(linkage_block, max.percent.8, type="l", lwd=2, col="blue")
text(7000, 0.95, "Theoretical max. 6 bp cutter")
text(6000, 0.15, "Theoretical max. 8 bp cutter", col= "blue")
